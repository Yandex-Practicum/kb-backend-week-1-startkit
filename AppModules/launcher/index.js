// 1. Подключите встроенный модуль "readline"

// 2. Подключите модуль "dictionary" со всеми сообщениями для пользователя

// 3. Подключите модуль "games" со всеми играми

/*
4. Создайте массив "gamesArray", представляющий доступные игры из объекта "games" и соответствующие им идентификаторы.
Массив должен содержать объект для каждой игры. Каждый объект в массиве должен иметь следующую структуру:
"id" — уникальный идентификатор игры строкового типа
"game" — функция-игра из объекта games
В массиве должно быть 6 объектов. Соответствие идентификатора и игры:
"1" — knightDragonAndPrincessGame
"2" — poleChudesGame
"3" — makeWordGame
"4" — blackJackGame
"5" — trueOrFalseGame
"6" — dropCoin
*/

/*
5. Создайте функцию "playGame", которая принимает "gameId", ищет соответствующую игру в массиве "gamesArray" и запускает её. 
"gameId" — это строка, которая содержит идентификатор игры. Она передаётся в функцию "playGame", чтобы определить, какую игру нужно запустить.
Функция использует метод "find" для поиска игры в массиве "gamesArray", сравнивая "id", указанный в объекте игры с параметром "gameId".
Затем, используя конструкцию "if/else", функция должна проверять результат работы метода "find". 
Если игра с таким идентификатором найдена в массиве "gamesArray", она должна запуститься. 
Иначе, если "gameId" равен "7", нужно вывести сообщение из словаря с ключем "dictionary.global.goodbye" и закрыть соединение "readline".
Иначе, если "gameId" не равен ни одному идентификатору игры, а также не равен "7", нужно вывести сообщение из словаря с ключем "dictionary.global.wrongInput", и вызывать функцию "askAndPlay", которую мы создадим дальше.
*/

/*
6. Создайте функцию askAndPlay, которая вызывает метод "readline.question" и спрашивает пользователя, в какую игру он хочет сыграть. Этот вопрос можно получить из словаря с ключем "dictionary.global.chooseGame".
После этого нужно вызвать функцию "playGame" с ответом пользователя в качестве аргумента.
Эта функция будет вызываться в самом начале программы, её нужно экспортировать из модуля, используя переменные "module" и "exports".
Обратите внимание, что эта функция также будет вызываться после каждой игры, если пользователь захочет выбрать другую игру (в функции "afterEnd").
*/

/*
7. Создайте функцию afterEnd, которая принимает результат игры и gameId. Эта функция будет запускаться после определённой игры, выводить в терминал сообщение о результате игры и спрашивать, что делать дальше.
Если результат игры равен "draw", нужно вывести в терминал сообщение из словаря с ключем dictionary.global.draw.
Если результат игры равен true, нужно вывести в терминал сообщение из словаря с ключем dictionary.global.win.
Если результат игры равен false, нужно вывести в терминал сообщение из словаря с ключем dictionary.global.lose.
После этого нужно спросить пользователя, хочет ли он сыграть в эту же игру ещё раз, выбрать другую игру или выйти из программы.
Если пользователь вводит "1", нужно вызвать функцию playGame с gameId в качестве аргумента.
Если пользователь вводит "2", нужно вызвать функцию askAndPlay (вы создадите её следующим шагом).
Если пользователь вводит "3", нужно вывести в терминал сообщение из словаря с ключем dictionary.global.goodbye и закрыть соединение readline.
*/

/*
8. Возвращаясь к функции "playGame", нужно чтобы после каждой игры вызывалась функция "afterEnd" с результатом игры и "gameId" в качестве аргументов.
Результат игры — это "true", "false" или строковое значение "draw". Он приходит из модуля "games" после окончания игры. Это промис, поэтому нужно использовать "then" после вызова функции игры.
*/

/*
9. В самом начале программы нужно вызвать функцию "askAndPlay". Для этого необходимо настроить импорт Для этого перейдите в файл "/index.js" и вызовите эту функцию из текущего модуля.
*/
